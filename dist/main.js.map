{"mappings":"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","sources":["src/nodehttpserver.js"],"sourcesContent":["/**\r\n * Created by Rick on 2021-08-29.\r\n */\r\n'use strict';\r\n\r\nconst http = require('http');\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst EventEmitter = require('events');\r\n\r\nconst global_error_emitter = new EventEmitter();\r\nglobal_error_emitter.on('error', async (res,err) => {\r\n  err.statusCode = err.statusCode || 500;\r\n  const content = {\r\n    statusCode: err.statusCode,\r\n    message: err.message\r\n  }\r\n  await reply_response(\r\n    res,\r\n    content.statusCode,\r\n    JSON.stringify(content),\r\n    'application/json'\r\n  );\r\n  if(err.stack !== undefined){\r\n    console.log(err.stack);\r\n  }\r\n});\r\n\r\nclass HttpServer{\r\n  constructor(host, port) {\r\n    this.host = host || process.env.HOST;\r\n    this.port = port || parseInt(process.env.PORT);\r\n    if(this.host === undefined){\r\n      this.host = '127.0.0.1';  // default IPv4 loopback address to the local host\r\n    }\r\n    if(isNaN(this.port)){\r\n      this.port = 8080;\r\n    }\r\n\r\n    this.base = [this.host,':',this.port].join('');\r\n\r\n    this.server = http.createServer();\r\n\r\n    this.methods = {\r\n      get: {},\r\n      post: {},\r\n      patch: {},\r\n      delete: {}\r\n    }\r\n    this.current_route = '/';\r\n    this.middlewares = {};\r\n    this.static_dir = __dirname;\r\n    this.found_file_path = null;\r\n\r\n    this.content_types = {\r\n      '.html': 'text/html',\r\n      '.jpg': 'image/jpeg',\r\n      '.css': 'text/css',\r\n      '.js': 'text/javascript',\r\n      '.png': 'imageg/png',\r\n      '.ico': 'image/x-icon',\r\n      '.json': 'application/json',\r\n      '.svg': 'image/svg+xml',\r\n      '.svgz': 'image/svg+xml'\r\n    }\r\n\r\n    this.server.on('request', this.callback);\r\n  };\r\n  callback = async (req,res) => {\r\n    const method = req.method.toLowerCase();\r\n    // const url_parsed = url.parse(req.url, true);\r\n    // let url_pathname = url_parsed.pathname;\r\n    const url = new URL(req.url, 'http:\\\\' + this.base);\r\n    let url_pathname = url.pathname;\r\n\r\n    // process middleware\r\n    if(Object.keys(this.middlewares).length > 0) {\r\n      //process middleware for '/' routes\r\n      for (let fn of this.middlewares['/']) {\r\n        await fn(req, res);\r\n      }\r\n      // process route specific middleware\r\n      if (Object.keys(this.middlewares).includes(url_pathname)) {\r\n        for (let fn of this.middlewares[url_pathname]) {\r\n          await fn(req, res);\r\n        }\r\n      }\r\n    }\r\n    switch (method) {\r\n      case 'get':\r\n        if (url_pathname in this.methods.get) {\r\n          this.methods.get[url_pathname](req, res);\r\n        } else if(this.static_dir !== null){\r\n          url_pathname = url_pathname.replace('/','');\r\n          const url_parts = url_pathname.split('/');\r\n          const target_file_name = url_parts[url_parts.length-1];\r\n          this.found_file_path = null;\r\n          this._search_file(this.static_dir, target_file_name);\r\n          if(this.found_file_path !== null) {\r\n            const content = await this._read_file(this.found_file_path);\r\n            const content_type = this.content_types[path.extname(this.found_file_path)];\r\n            await reply_response(res, 200, content, content_type);\r\n          }else {\r\n            const err = {\r\n              statusCode: 404,\r\n              message: `Could not locate ${url_pathname} (get)`\r\n            }\r\n            global_error_emitter.emit('error',res,err);\r\n          }\r\n        } else {\r\n          const err = {\r\n            statusCode: 404,\r\n            message: `Could not locate ${url_pathname} (get)`\r\n          }\r\n          global_error_emitter.emit('error',res,err);\r\n        }\r\n        break;\r\n      case 'post':\r\n        if (url_pathname in this.methods.post) {\r\n          this.methods.post[url_pathname](req, res);\r\n        } else {\r\n          const err = {\r\n            statusCode: 404,\r\n            message: `Could not locate ${url_pathname} (post)`\r\n          }\r\n          global_error_emitter.emit('error',res,err);\r\n        }\r\n        break;\r\n      case 'patch':\r\n        if (url_pathname in this.methods.patch) {\r\n          this.methods.patch[url_pathname](req, res);\r\n        } else {\r\n          const err = {\r\n            statusCode: 404,\r\n            message: `Could not locate ${url_pathname} (patch)`\r\n          }\r\n          global_error_emitter.emit('error',res,err);\r\n        }\r\n        break;\r\n      case 'delete':\r\n        if (url_pathname in this.methods.delete) {\r\n          this.methods.delete[url_pathname](req, res);\r\n        } else {\r\n          const err = {\r\n            statusCode: 404,\r\n            message: `Could not locate ${url_pathname} (delete)`\r\n          }\r\n          global_error_emitter.emit('error',res,err);\r\n        }\r\n        break;\r\n      default:\r\n        const err = {\r\n          statusCode: 400,\r\n          message: `Method ${method} is not supported.`\r\n        }\r\n        global_error_emitter.emit('error',res,err);\r\n        break;\r\n    }\r\n  }\r\n\r\n  use({route = '/', middleware = () => {}}) {\r\n    if(!(Object.keys(this.middlewares).includes(route))) {\r\n      this.middlewares[route] = [];\r\n    }\r\n    this.middlewares[route].push(middleware);\r\n  }\r\n  route(a_route){\r\n    this.current_route = a_route;\r\n    return this;\r\n  }\r\n\r\n  add_router(router){\r\n    for(const route of router.methods.get) {\r\n      this.methods.get[route.route] = route.handler;\r\n    }\r\n    for(const route of router.methods.post) {\r\n      this.methods.post[route.route] = route.handler;\r\n    }\r\n    for(const route of router.methods.patch) {\r\n      this.methods.patch[route.route] = route.handler;\r\n    }\r\n    for(const route of router.methods.delete) {\r\n      this.methods.delete[route.route] = route.handler;\r\n    }\r\n  }\r\n\r\n  add_content_type(ext, content_type){\r\n    this.content_types.push({ext:content_type});\r\n  }\r\n\r\n  get({route = this.current_route, handler = () => {}}){\r\n    this.methods.get[route] = handler;\r\n    return this;\r\n  }\r\n  post({route = this.current_route, handler = () => {}}){\r\n    this.methods.post[route] = handler;\r\n    return this;\r\n  }\r\n  patch({route = this.current_route, handler = () => {}}){\r\n    this.methods.patch[route] = handler;\r\n    return this;\r\n  }\r\n  delete({route = this.current_route, handler = () => {}}){\r\n    this.methods.delete[route] = handler;\r\n    return this;\r\n  }\r\n\r\n  listen(message){\r\n    this.server.listen(this.port, this.host, () => {\r\n      console.log(`${message} listening on port ${this.port}`);\r\n    })\r\n    return this.server;\r\n  }\r\n\r\n  static(dir_path) {\r\n    this.static_dir = dir_path;\r\n  }\r\n\r\n  _read_file = (file_path) => {\r\n    return new Promise((resolve, reject) => {\r\n      fs.readFile(file_path, (err,content) => {\r\n        if(err) reject(err);\r\n        resolve(content);\r\n      })\r\n    })\r\n  }\r\n\r\n  _write_file = (file_path, data, flag= 'w') => {\r\n    return new Promise((resolve, reject) => {\r\n      fs.writeFile(file_path, data, {flag: flag}, (err) => {\r\n        if (err) reject(err);\r\n        resolve('ok');\r\n      })\r\n    })\r\n  }\r\n\r\n  _search_file(dir, target_file_name){\r\n    for(const file of fs.readdirSync(dir)){\r\n      const full_path = path.join(dir, file);\r\n      if(fs.lstatSync(full_path).isDirectory()){\r\n        this._search_file(full_path, target_file_name);\r\n      }else{\r\n        if((path.basename(full_path)) === target_file_name){\r\n          this.found_file_path = full_path;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst reply_response = (res, status, content, content_type = 'text/html') => {\r\n  return new Promise((resolve, reject) => {\r\n    res\r\n      .setHeader('Content-Type', content_type)\r\n      .writeHead(status)\r\n      .end(content);\r\n    resolve();\r\n  });\r\n}\r\nconst get_query_str = (req) => {\r\n  return decodeURI(req.url).split('?')[1];\r\n}\r\n\r\nconst get_query_obj = (query_string) => {\r\n  if(query_string === undefined) return {};\r\n\r\n  const query_string_pieces = query_string.split(\"&\");\r\n  const decoded_query_string = {};\r\n\r\n  for(const piece of query_string_pieces){\r\n    const [key, value] = piece.split(\"=\");\r\n    let data = null;\r\n    try {\r\n      const obj_str = '{' + '\"' + key + '\"' + ':' + value + '}';\r\n      data = JSON.parse(obj_str);\r\n    }catch (err){\r\n      const obj_str = '{' + '\"' + key + '\"' + ':' + '\"' + value + '\"' + '}';\r\n      data = JSON.parse(obj_str);\r\n    }\r\n    //lodash_set(decoded_query_string, key, data[key]);\r\n  }\r\n  return decoded_query_string;\r\n}\r\n\r\nconst find_object = (array_of_obj, obj_conditions) => {\r\n  const condition_keys = Object.keys(obj_conditions);\r\n  return array_of_obj.filter(obj => {\r\n    return condition_keys.every((key) => obj[key] === obj_conditions[key]);\r\n  });\r\n}\r\n\r\nconst send_404 = async (res, obj) => {\r\n  await reply_response(res, 404, JSON.stringify(obj), 'application/json');\r\n}\r\n\r\nconst get_body = (req) => {\r\n  let body = \"\";\r\n  return new Promise((resolve, reject) => {\r\n    req.on('data', (chunk) => {\r\n      body += chunk.toString();\r\n    }).on('end', () => {\r\n      const parsed = JSON.parse(body);\r\n      //body = Buffer.concat(body);\r\n      resolve(JSON.parse(body));\r\n    }).on('error', (err) =>{\r\n      reject(err);\r\n    })\r\n  })\r\n}\r\n\r\nconst set_cookies = (res, cookies) => {\r\n  res.setHeader('Set-Cookie', cookies);\r\n}\r\n\r\nclass Router {\r\n  constructor() {\r\n    this.route = undefined;\r\n    this.methods = {\r\n      get: [],\r\n      post: [],\r\n      patch: [],\r\n      delete: []\r\n    }\r\n  }\r\n  set_route(route){\r\n    this.route = route;\r\n    return this;\r\n  }\r\n  get(handler = () => {}){\r\n    this.methods.get.push({\r\n      route: this.route,\r\n      handler: handler\r\n    });\r\n    return this;\r\n  }\r\n  post(handler = () => {}){\r\n    this.methods.post.push({\r\n      route: this.route,\r\n      handler: handler\r\n    });\r\n    return this;\r\n  }\r\n  patch(handler = () => {}){\r\n    this.methods.patch.push({\r\n      route: this.route,\r\n      handler: handler\r\n    });\r\n    return this;\r\n  }\r\n  delete(handler = () => {}){\r\n    this.methods.delete.push({\r\n      route: this.route,\r\n      handler: handler\r\n    });\r\n    return this;\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  HttpServer: HttpServer,\r\n  reply_response: reply_response,\r\n  get_query_str: get_query_str,\r\n  get_query_obj: get_query_obj,\r\n  get_body: get_body,\r\n  find_object: find_object,\r\n  send_404: send_404,\r\n  set_cookies: set_cookies,\r\n  global_error_emitter: global_error_emitter,\r\n  Router: Router\r\n}\r\n"],"names":[],"version":3,"file":"main.js.map"}